# -*- coding: utf-8 -*-

from pyramid.view import view_config

from deform import Form, Button, ValidationFailure
from colanderalchemy import SQLAlchemySchemaNode
<tal:def define="view_classes project.classes.view_classes">
from models import (
    DBSession,
    <tal:rep repeat="classe view_classes">
    ${classe.name},
    </tal:rep>
    )

@view_config(route_name='home', renderer='templates/home.pt')
def home_view(request):
    """View da p√°gina principal."""
    return {'view_classes': view_classes}

<tal:rep repeat="classe view_classes">
@view_config(route_name='${classe.lower_name}', renderer='templates/default.pt')
def ${classe.lower_name}_view(request):
    """View da classe ${classe.lower_name}."""
    alchemy_schema = ${classe.name}()
    schema = dbschema.__colanderalchemy__
    bt = Button(name='enviar', value='Enviar')
    form = Form(schema, buttons=(bt,))
    
    if 'enviar' in request.POST:
        campos = request.POST.items()
        try:
            form.validate(campos)
        except ValidationFailure, e:
            return {'form': e.render()}
        return {'form': '<br/>'.join(['<b>%s</b> > %s' % (x[0], x[1]) for x in campos])}

    return {'form': form.render()}
</tal:rep>
</tal:def>