from sqlalchemy import Enum, Column, Index, Integer, Text, String, Numeric, ForeignKey, Date, Boolean
from sqlalchemy import event
from colanderalchemy import setup_schema
from deform.widget import TextInputWidget, SelectWidget, RadioChoiceWidget, SequenceWidget, AutocompleteInputWidget
from .meta import Base
<tal:def define="classes project.classes">
<tal:rep repeat="classe classes">
class ${classe.name}(${', '.join(c.name for c in classe.parents) if bool(classe.parents) else 'Base'}):
    <tal:cond condition="not bool(classe.parents)">
    __tablename__ = "${classe.tablename}"<tal:cond condition="bool(classe.children)">
    __mapper_args__ = { "polymorphic_on": "${classe.polymorphic_on}" }</tal:cond>
    </tal:cond><tal:cond condition="bool(classe.parents)">
    __mapper_args__ = { "polymorphic_identity": "${ classe.polymorphic_identity }" }
    </tal:cond><tal:rep repeat="atributo classe.attributes"><tal:cond condition="not atributo.is_association_attribute">
    ${atributo.name} = Column(${atributo.tipo},<tal:defcond define="atv atributo.tagged_values" condition="bool(atv)"><tal:cond condition="'primary_key' in atv.keys()">
        primary_key=${str(atv['primary_key'].value)},</tal:cond><tal:cond condition="'nullable' in atv.keys()">
        nullable=${str(atv['nullable'].value)},</tal:cond><tal:cond condition="atributo.colander">
        info={ "colanderalchemy" : {<tal:rep repeat="taggedv atributo.colander.not_widget_related"><tal:cond condition="taggedv.name != 'widget'">
               "${taggedv.name}": ${taggedv.value if taggedv.tipo == "Boolean" else '"%s"' % taggedv.value },</tal:cond><tal:cond condition="taggedv.name == 'widget'">
               "${taggedv.name}": ${taggedv.value}(<tal:rep repeat="rtaggedv atributo.tagged_values.widget_related">
                                    ${rtaggedv.widget_related_name}=${rtaggedv.value},</tal:rep>
                                  ),</tal:cond></tal:rep>}}</tal:cond></tal:defcond>
        )</tal:cond>
        </tal:rep><tal:cond condition="bool(classe.children)">
    ${classe.polymorphic_on} = Column(String(50),
        nullable=False,
        info={ "colanderalchemy" : { 'exclude': True } })</tal:cond>

event.listen(${classe.name}, "mapper_configured", setup_schema)
</tal:rep>
</tal:def>
